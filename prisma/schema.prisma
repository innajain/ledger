generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model asset {
  id   String     @id @unique @default(cuid())
  name String     @unique
  type asset_type

  code String?

  opening_balances                                opening_balance[]
  income_txn                                      income_txn[]
  expense_txn                                     expense_txn[]
  self_transfer_or_refundable_or_refund_txn       self_transfer_or_refundable_or_refund_txn[]
  asset_trade_debit                               asset_trade_txn[]                               @relation("DebitAsset")
  asset_trade_credit                              asset_trade_txn[]                               @relation("CreditAsset")

  asset_reallocation_between_purpose_buckets_from asset_reallocation_between_purpose_buckets[]
}

model account {
  id   String @id @unique @default(cuid())
  name String @unique

  opening_balances opening_balance[]

  income_txn                                     income_txn[]
  expense_txn                                    expense_txn[]
  self_transfer_or_refundable_or_refund_txn_from self_transfer_or_refundable_or_refund_txn[] @relation("FromAccount")
  self_transfer_or_refundable_or_refund_txn_to   self_transfer_or_refundable_or_refund_txn[] @relation("ToAccount")
  asset_trade_debit                              asset_trade_txn[]                           @relation("DebitAccount")
  asset_trade_credit                             asset_trade_txn[]                           @relation("CreditAccount")
}

model opening_balance {
  id String @id @unique @default(cuid())

  account_id String
  account    account @relation(fields: [account_id], references: [id])

  asset_id String
  asset    asset  @relation(fields: [asset_id], references: [id])

  quantity Float
  date     DateTime

  allocation_to_purpose_buckets allocation_to_purpose_bucket[]

  @@unique([account_id, asset_id])
}

model transaction {
  id          String  @id @unique @default(cuid())
  description String?

  type transaction_type?

  income_txn                                income_txn?
  expense_txn                               expense_txn?
  self_transfer_or_refundable_or_refund_txn self_transfer_or_refundable_or_refund_txn?
  asset_trade_txn                           asset_trade_txn?
}

model income_txn {
  id   String   @id @unique @default(cuid())
  date DateTime

  transaction_id String      @unique
  transaction    transaction @relation(fields: [transaction_id], references: [id], onDelete: Cascade)

  asset_id   String
  asset      asset   @relation(fields: [asset_id], references: [id])
  account_id String
  account    account @relation(fields: [account_id], references: [id])

  quantity Float

  allocation_to_purpose_buckets allocation_to_purpose_bucket[]
}

model expense_txn {
  id   String   @id @unique @default(cuid())
  date DateTime

  transaction_id String      @unique
  transaction    transaction @relation(fields: [transaction_id], references: [id], onDelete: Cascade)

  asset_id   String
  asset      asset   @relation(fields: [asset_id], references: [id])
  account_id String
  account    account @relation(fields: [account_id], references: [id])

  quantity Float

  purpose_bucket_id String
  purpose_bucket    purpose_bucket @relation(fields: [purpose_bucket_id], references: [id])
}

model self_transfer_or_refundable_or_refund_txn {
  id   String   @id @unique @default(cuid())
  date DateTime

  transaction_id String      @unique
  transaction    transaction @relation(fields: [transaction_id], references: [id], onDelete: Cascade)

  asset_id String
  asset    asset  @relation(fields: [asset_id], references: [id])

  from_account_id String
  from_account    account @relation("FromAccount", fields: [from_account_id], references: [id])

  to_account_id String
  to_account    account @relation("ToAccount", fields: [to_account_id], references: [id])

  quantity Float
}

model asset_trade_txn {
  id String @id @unique @default(cuid())

  transaction_id String      @unique
  transaction    transaction @relation(fields: [transaction_id], references: [id], onDelete: Cascade)

  debit_asset_id   String
  debit_asset      asset    @relation("DebitAsset", fields: [debit_asset_id], references: [id])
  debit_account_id String
  debit_account    account  @relation("DebitAccount", fields: [debit_account_id], references: [id])
  debit_quantity   Float
  debit_date       DateTime

  credit_asset_id   String
  credit_asset      asset    @relation("CreditAsset", fields: [credit_asset_id], references: [id])
  credit_account_id String
  credit_account    account  @relation("CreditAccount", fields: [credit_account_id], references: [id])
  credit_quantity   Float
  credit_date       DateTime

  asset_replacement_in_purpose_buckets asset_replacement_in_purpose_bucket[]
}

model purpose_bucket {
  id   String  @id @unique @default(cuid())
  name String  @unique

  allocation_to_purpose_bucket allocation_to_purpose_bucket[]
  expense_txn                  expense_txn[]

  asset_replacement_in_purpose_buckets asset_replacement_in_purpose_bucket[]
  asset_reallocation_between_purpose_buckets_from asset_reallocation_between_purpose_buckets[] @relation("FromPurposeBucket")
  asset_reallocation_between_purpose_buckets_to   asset_reallocation_between_purpose_buckets[] @relation("ToPurposeBucket")
}

model allocation_to_purpose_bucket {
  id       String @id @unique @default(cuid())
  quantity Float

  purpose_bucket_id String
  bucket            purpose_bucket @relation(fields: [purpose_bucket_id], references: [id])

  income_txn_id          String?
  allocation_thru_income income_txn? @relation(fields: [income_txn_id], references: [id], onDelete: Cascade)

  opening_balance_id              String?
  allocation_thru_account_opening opening_balance? @relation(fields: [opening_balance_id], references: [id], onDelete: Cascade)

  @@unique([purpose_bucket_id, income_txn_id])
  @@unique([purpose_bucket_id, opening_balance_id])
}

model asset_replacement_in_purpose_bucket {
  id String @id @unique @default(cuid())

  purpose_bucket_id String
  purpose_bucket    purpose_bucket @relation(fields: [purpose_bucket_id], references: [id])

  asset_trade_txn_id String
  asset_trade_txn    asset_trade_txn @relation(fields: [asset_trade_txn_id], references: [id], onDelete: Cascade)

  debit_quantity  Float
  credit_quantity Float
}

model asset_reallocation_between_purpose_buckets {
  id String @id @unique @default(cuid())

  from_purpose_bucket_id String
  from_purpose_bucket    purpose_bucket @relation("FromPurposeBucket", fields: [from_purpose_bucket_id], references: [id])

  to_purpose_bucket_id String
  to_purpose_bucket    purpose_bucket @relation("ToPurposeBucket", fields: [to_purpose_bucket_id], references: [id])

  asset_id String
  asset    asset  @relation(fields: [asset_id], references: [id])

  quantity Float
  date     DateTime
}

enum transaction_type {
  expense
  income
  self_transfer
  refundable
  refund
  asset_trade
}

enum asset_type {
  rupees
  mf
  etf
  other
}

enum manual_allocation_type {
  allocate
  deallocate
}
